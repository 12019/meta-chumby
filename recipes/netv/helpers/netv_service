#!/bin/sh

case "$1" in
	start)
	      # very important: make sure clock is input before doing this!
	      regutil -w LCD_CFG_SCLK_DIV=0x90000001
	      echo "installing chumby xilinx driver"
	      modprobe chumby_xilinx
	      sleep 1 # must give FPGA time to stabilize
	      echo "configuring FPGA"
	      fpga_ctl r
	      cat /lib/firmware/hdmi_overlay.bin > /dev/fpga

	      # maximize depth of LCD fifos
	      regutil -w LCD_MISC_CNTL=0x0  #0x5 to distress
	      # hard-code sync to active high
	      regutil -w LCD_SPU_DUMB_CTRL=0x210ff003
	      
	      echo "forcing attached mode to a supported EDID"
	      fpga_ctl H  # force HPD
	      sleep 1  # this may be removeable, but just in case FPGA takes a moment to start...
	      fpga_ctl H  # force HPD
	      modeline /lib/firmware/1080p24_720p_480p.edid
	      writecached_Km # write the cached Km in, if it exists
	      fpga_ctl E  # force EDID squashing
	      fpga_ctl h  # reconnect device
	      # Km re-derivation is now called by an HPD event at this point

	      echo "starting matchmode daemon"
	      matchmoded

	      echo "setting genlock lead and margin"
	      # the following magic numbers are chosen to pick about 6 line's depth buffering
	      # and "locked" to within about 2 lines depth
	      # these numbers changed based on resolution -- if not 720p, it's different
	      putreg 0x16 0x30  # 0x3000 pixels times to buffer
	      putreg 0x12 0x10  # within 0x1000 we'll call "locked"

	      putreg 3 0x45  # reset the genlock machine
	      putreg 3 0x25  # now run in normal mode with "smart genlocking" on

	      # this is defunct, just for demo purposes
	      # setbox 100 100 1080 520 # center an opening

	      # temp fix for the pink line at the bottom
	      sleep 2
	      regutil -w LCD_SPU_V_PORCH=0x50005 

		;;

	stop)
	      echo "resetting FPGA and stopping"
	      fpga_ctl r
	      rmmod chumby_xilinx
	      killall matchmoded

		;;

    restart)
	$0 stop
	$0 start

	;;

	*)
		echo "Usage: $0 {start|stop|restart}" >&2
		;;
esac
