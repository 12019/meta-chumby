diff -Nurd NetworkManager-0.8.1-stock/system-settings/plugins/chumby/plugin.c NetworkManager-0.8.1/system-settings/plugins/chumby/plugin.c
--- NetworkManager-0.8.1-stock/system-settings/plugins/chumby/plugin.c	2011-05-06 05:32:06.040142307 +0800
+++ NetworkManager-0.8.1/system-settings/plugins/chumby/plugin.c	2011-05-06 05:32:26.340142307 +0800
@@ -121,23 +121,33 @@
 	PLUGIN_PRINT("chumby", "Reloading configs...\n");
 
 
-        if(priv->iface_connections)
-		existing = priv->iface_connections;
-	else
-		existing = g_hash_table_new (g_str_hash, g_str_equal);
-	priv->iface_connections = g_hash_table_new (g_str_hash, g_str_equal);
-
 
 	/*parse the file and get the DOM */
 	doc = xmlReadFile(CONFIG_FILE, NULL, 0);
 
 	if (doc == NULL) {
 		PLUGIN_PRINT("chumby", "error: could not parse file %s\n", CONFIG_FILE);
+		xmlCleanupParser();
 		return;
 	}
 
 	/*Get the root element node */
 	root_element = xmlDocGetRootElement(doc);
+	if (!root_element) {
+		PLUGIN_PRINT("chumby", "error: could not find root element in " CONFIG_FILE "\n");
+		xmlFreeDoc(doc);
+		xmlCleanupParser();
+		return;
+	}
+
+
+        if(priv->iface_connections)
+		existing = priv->iface_connections;
+	else
+		existing = g_hash_table_new (g_str_hash, g_str_equal);
+	priv->iface_connections = g_hash_table_new (g_str_hash, g_str_equal);
+
+
 	for (cur_node = root_element->children; cur_node; cur_node = cur_node->next) {
 		if (cur_node->type == XML_ELEMENT_NODE && !strcmp((char *)cur_node->name, "configuration")) {
 			NMChumbyConnection *exported;
diff -Nurd NetworkManager-0.8.1-stock/system-settings/plugins/chumby/plugin.c.orig NetworkManager-0.8.1/system-settings/plugins/chumby/plugin.c.orig
--- NetworkManager-0.8.1-stock/system-settings/plugins/chumby/plugin.c.orig	1970-01-01 07:30:00.000000000 +0730
+++ NetworkManager-0.8.1/system-settings/plugins/chumby/plugin.c.orig	2011-05-06 05:25:35.532142256 +0800
@@ -0,0 +1,581 @@
+/* -*- Mode: C; tab-width: 5; indent-tabs-mode: t; c-basic-offset: 5 -*- */
+
+/* NetworkManager system settings service
+ *
+ * SÃ¸ren Sandmann <sandmann@daimi.au.dk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * (C) Copyright 2007 - 2009 Red Hat, Inc.
+ * (C) Copyright 2007 - 2008 Novell, Inc.
+ */
+
+#include <config.h>
+#include <string.h>
+
+#include <gmodule.h>
+#include <glib-object.h>
+#include <gio/gio.h>
+
+#include <stdio.h>
+#include <string.h>
+#include <stdint.h>
+#include <ctype.h>
+#include <libxml/parser.h>
+#include <libxml/tree.h>
+#include <glib.h>
+#include <sys/stat.h>
+#include <arpa/inet.h>
+#include <sys/stat.h>
+#include <netinet/ether.h>
+
+#include <nm-setting.h>
+#include <nm-setting-ip4-config.h>
+#include <nm-setting-ip6-config.h>
+#include <nm-setting-vpn.h>
+#include <nm-setting-connection.h>
+#include <nm-setting-wired.h>
+#include <nm-setting-wireless.h>
+#include <nm-setting-bluetooth.h>
+#include <nm-setting-serial.h>
+#include <nm-setting-gsm.h>
+#include <nm-setting-cdma.h>
+#include <nm-setting-ppp.h>
+
+
+#include "plugin.h"
+#include "config.h"
+#include "nm-system-config-interface.h"
+
+#define CHUMBY_PLUGIN_NAME "chumby"
+#define CHUMBY_PLUGIN_INFO "(C) 2011 chumby industries"
+#define CHUMBY_DIR "/psp"
+#define CONF_DHCP CHUMBY_DIR "/dhcp"
+#define HOSTNAME_FILE "/etc/HOSTNAME"
+#define CONFIG_FILE "/psp/network_configs"
+
+static void system_config_interface_init (NMSystemConfigInterface *system_config_interface_class);
+
+G_DEFINE_TYPE_EXTENDED (SCPluginChumby, sc_plugin_chumby, G_TYPE_OBJECT, 0,
+                        G_IMPLEMENT_INTERFACE (NM_TYPE_SYSTEM_CONFIG_INTERFACE,
+                                               system_config_interface_init))
+
+#define SC_PLUGIN_CHUMBY_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), SC_TYPE_PLUGIN_CHUMBY, SCPluginChumbyPrivate))
+
+
+#define CHUMBY_FILE_PATH_TAG "chumby-file-path"
+
+
+typedef struct {
+	GFileMonitor *hostname_monitor;
+	GFileMonitor *dhcp_monitor;
+	char *hostname;
+	GHashTable *iface_connections;
+} SCPluginChumbyPrivate;
+
+GQuark
+chumby_plugin_error_quark (void)
+{
+	static GQuark error_quark = 0;
+
+	if (G_UNLIKELY (error_quark == 0))
+		error_quark = g_quark_from_static_string ("chumby-plugin-error-quark");
+
+	return error_quark;
+}
+
+typedef void (*FileChangedFn) (gpointer user_data);
+
+typedef struct {
+	FileChangedFn callback;
+	gpointer user_data;
+} FileMonitorInfo;
+
+
+
+
+static void
+reload_configs (gpointer data)
+{
+	xmlDoc *doc = NULL;
+	xmlNode *root_element = NULL;
+	xmlNode *cur_node;
+
+	SCPluginChumbyPrivate *priv = SC_PLUGIN_CHUMBY_GET_PRIVATE (data);
+
+	GHashTable *existing;
+
+
+	PLUGIN_PRINT("chumby", "Reloading configs...\n");
+
+
+        if(priv->iface_connections)
+		existing = priv->iface_connections;
+	else
+		existing = g_hash_table_new (g_str_hash, g_str_equal);
+	priv->iface_connections = g_hash_table_new (g_str_hash, g_str_equal);
+
+
+	/*parse the file and get the DOM */
+	doc = xmlReadFile(CONFIG_FILE, NULL, 0);
+
+	if (doc == NULL) {
+		PLUGIN_PRINT("chumby", "error: could not parse file %s\n", CONFIG_FILE);
+		return;
+	}
+
+	/*Get the root element node */
+	root_element = xmlDocGetRootElement(doc);
+	for (cur_node = root_element->children; cur_node; cur_node = cur_node->next) {
+		if (cur_node->type == XML_ELEMENT_NODE && !strcmp((char *)cur_node->name, "configuration")) {
+			NMChumbyConnection *exported;
+			struct connection conn;
+			gchar uuid[60];
+			read_connection(&conn, cur_node);
+			generate_uuid(&conn, uuid, sizeof(uuid));
+
+			if (g_hash_table_lookup (priv->iface_connections, uuid)) {
+				PLUGIN_PRINT("chumby", "Ignoring duplicate connection %s (%s)\n", (conn.connection_type == CONNECTION_TYPE_WLAN) ? conn.phy.wlan.ssid : "lan", uuid);
+				continue;
+			}
+
+			/* Determine whether this connection is new */
+			exported = g_hash_table_lookup (existing, uuid);
+			if(!g_hash_table_remove (existing, uuid))
+			{
+				PLUGIN_PRINT("chumby", "Adding new connection %s (%s)\n", (conn.connection_type == CONNECTION_TYPE_WLAN) ? conn.phy.wlan.ssid : "lan", uuid);
+				exported = nm_chumby_connection_new(&conn);
+				g_signal_emit_by_name (data,
+						       NM_SYSTEM_CONFIG_INTERFACE_CONNECTION_ADDED,
+						       exported);
+				g_signal_emit_by_name (data,
+						       NM_SYSTEM_CONFIG_INTERFACE_UNMANAGED_SPECS_CHANGED);
+			}
+			else
+				PLUGIN_PRINT("chumby", "Preserving old connection %s (%s)\n", (conn.connection_type == CONNECTION_TYPE_WLAN) ? conn.phy.wlan.ssid : "lan", uuid);
+			g_hash_table_insert (priv->iface_connections, uuid, exported);
+		}
+	}
+	xmlFreeDoc(doc);
+	xmlCleanupParser();
+
+	/* Remove configs that don't exist anymore */
+	{
+		GHashTableIter iter;
+		gpointer value;
+
+		g_hash_table_iter_init (&iter, existing);
+		while (g_hash_table_iter_next (&iter, NULL, &value)) {
+			//g_object_ref (value);
+			g_signal_emit_by_name (value, NM_SETTINGS_CONNECTION_INTERFACE_REMOVED);
+			g_object_unref (value);
+		}
+	}
+
+	g_hash_table_destroy (existing);
+
+}
+
+
+
+void
+connection_to_nmconnection (NMConnection *connection, struct connection *conn)
+{
+	NMSettingConnection *s_con;
+	NMSetting *setting;
+	gchar id[40];
+	GError *error = NULL;
+
+
+	generate_uuid(conn, id, sizeof(id));
+
+	s_con = (NMSettingConnection *) nm_connection_get_setting (connection, NM_TYPE_SETTING_CONNECTION);
+
+
+	setting = nm_connection_create_setting ("connection");
+	g_object_set (setting, "uuid", id, NULL);
+	if(conn->connection_type == CONNECTION_TYPE_WLAN)
+	{
+		g_object_set (setting, "id", conn->phy.wlan.ssid, NULL);
+		g_object_set (setting, "type", "802-11-wireless", NULL);
+	}
+	else
+	{
+		g_object_set (setting, "id", "lan", NULL);
+		g_object_set (setting, "type", "802-3-ethernet", NULL);
+	}
+	nm_connection_add_setting (connection, setting);
+
+
+	setting = nm_connection_create_setting ("ipv4");
+	if(conn->allocation_type == ALLOCATION_TYPE_DHCP) {
+		g_object_set (setting, "method", "auto", NULL);
+	}
+	else {
+		int netmask;
+		GPtrArray *addresses;
+		GArray *address;
+
+		g_object_set (setting, "method", "manual", NULL);
+		for(netmask=31; netmask>=0; netmask--)
+			if(conn->netmask & (1<<netmask))
+				break;
+		netmask++;
+		g_object_set (setting, "method", "manual", NULL);
+
+		addresses = g_ptr_array_sized_new (3);
+		address = g_array_sized_new (FALSE, TRUE, sizeof (guint32), 3);
+		g_array_append_val (address, conn->ip);
+		g_array_append_val (address, netmask);
+		g_array_append_val (address, conn->gateway);
+		g_ptr_array_add (addresses, address);
+		g_object_set (setting, "addresses", addresses, NULL);
+		g_array_free (address, TRUE);
+		g_ptr_array_free (addresses, TRUE);
+		//fprintf(output, "addresses=%u,%u,%u\n", conn->ip, netmask+1, conn->gateway);
+		//fprintf(output, "dns=%u,%u\n", conn->nameserver1, conn->nameserver2);
+	}
+	nm_connection_add_setting (connection, setting);
+
+
+	if(conn->connection_type == CONNECTION_TYPE_WLAN) {
+		NMSettingWireless *wireless_setting = NULL;
+		GByteArray *array = NULL;
+
+		setting = nm_connection_create_setting ("802-11-wireless");
+
+
+		wireless_setting = NM_SETTING_WIRELESS(nm_setting_wireless_new());
+
+		/* Copy over the SSID */
+		PLUGIN_PRINT("chumby", "Setting SSID to %s (%d bytes long)", conn->phy.wlan.ssid, conn->phy.wlan.ssid_len);
+		array = g_byte_array_sized_new (strlen (conn->phy.wlan.ssid));
+		g_byte_array_append (array, (const guint8 *) conn->phy.wlan.ssid, strlen (conn->phy.wlan.ssid));
+
+		g_object_set (wireless_setting, NM_SETTING_WIRELESS_SSID, array, NULL);
+		g_byte_array_free (array, TRUE);
+		nm_connection_add_setting (connection, (NMSetting*)wireless_setting);
+
+
+		if (conn->phy.wlan.auth_type != AUTH_TYPE_OPEN) {
+			setting = nm_connection_create_setting ("802-11-wireless-security");
+			if(conn->phy.wlan.auth_type == AUTH_TYPE_OPEN || conn->phy.wlan.auth_type == AUTH_TYPE_WEPAUTO) {
+				g_object_set (setting, "key-mgmt", "none", NULL);
+			}
+			else if(conn->phy.wlan.auth_type == AUTH_TYPE_WPAPSK || conn->phy.wlan.auth_type == AUTH_TYPE_WPA2PSK) {
+				g_object_set (setting, "key-mgmt", "wpa-psk", NULL);
+			}
+			
+			if(conn->phy.wlan.encryption_type == ENCRYPTION_TYPE_WEP) {
+				g_object_set (setting, NM_SETTING_WIRELESS_SECURITY_WEP_KEY0, conn->phy.wlan.key, NULL);
+				if (conn->phy.wlan.key_type == KEY_TYPE_ASCII)
+					g_object_set (setting, NM_SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE, NM_WEP_KEY_TYPE_PASSPHRASE, NULL);
+				else if (conn->phy.wlan.key_type == KEY_TYPE_HEX)
+					g_object_set (setting, NM_SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE, NM_WEP_KEY_TYPE_KEY, NULL);
+				else
+					g_object_set (setting, NM_SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE, NM_WEP_KEY_TYPE_UNKNOWN, NULL);
+			}
+			else if(conn->phy.wlan.encryption_type == ENCRYPTION_TYPE_AES || conn->phy.wlan.encryption_type == ENCRYPTION_TYPE_TKIP) {
+				g_object_set (setting, "psk", conn->phy.wlan.key, NULL);
+			}
+			nm_connection_add_setting (connection, setting);
+		}
+	}
+
+	else if(conn->connection_type == CONNECTION_TYPE_LAN) {
+		setting = nm_connection_create_setting ("802-3-ethernet");
+		nm_connection_add_setting (connection, setting);
+	}
+
+	if (!nm_connection_verify (connection, &error)) {
+		PLUGIN_PRINT("chumby", "Not a connection: %s", error->message);
+		g_object_unref (connection);
+		connection = NULL;
+	}
+
+
+	return;
+}
+
+
+static GSList *
+get_connections (NMSystemConfigInterface *config)
+{
+	SCPluginChumbyPrivate *priv = SC_PLUGIN_CHUMBY_GET_PRIVATE (config);
+	GSList *connections = NULL;
+	GHashTableIter iter;
+	gpointer value;
+
+	g_hash_table_iter_init (&iter, priv->iface_connections);
+	while (g_hash_table_iter_next (&iter, NULL, &value))
+		connections = g_slist_prepend (connections, value);
+
+	return connections;
+}
+
+
+
+
+static void
+file_changed (GFileMonitor *monitor,
+		    GFile *file,
+		    GFile *other_file,
+		    GFileMonitorEvent event_type,
+		    gpointer user_data)
+{
+	FileMonitorInfo *info;
+
+	switch (event_type) {
+	case G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT:
+	case G_FILE_MONITOR_EVENT_CREATED:
+		info = (FileMonitorInfo *) user_data;
+		info->callback (info->user_data);
+		g_signal_emit_by_name (G_OBJECT (info->user_data), NM_SYSTEM_CONFIG_INTERFACE_UNMANAGED_SPECS_CHANGED);
+		break;
+	default:
+		break;
+	}
+}
+
+static GFileMonitor *
+monitor_file_changes (const char *filename,
+				  FileChangedFn callback,
+				  gpointer user_data)
+{
+	GFile *file;
+	GFileMonitor *monitor;
+	FileMonitorInfo *info;
+
+	file = g_file_new_for_path (filename);
+	monitor = g_file_monitor_file (file, G_FILE_MONITOR_NONE, NULL, NULL);
+	g_object_unref (file);
+
+	if (monitor) {
+		info = g_new0 (FileMonitorInfo, 1);
+		info->callback = callback;
+		info->user_data = user_data;
+		g_object_weak_ref (G_OBJECT (monitor), (GWeakNotify) g_free, info);
+		g_signal_connect (monitor, "changed", G_CALLBACK (file_changed), info);
+	}
+
+	return monitor;
+}
+
+static gboolean
+hostname_is_dynamic (void)
+{
+	GIOChannel *channel;
+	const char *pattern = "DHCLIENT_SET_HOSTNAME=";
+	char *str = NULL;
+	int pattern_len;
+	gboolean dynamic = FALSE;
+
+	channel = g_io_channel_new_file (CONF_DHCP, "r", NULL);
+	if (!channel)
+		return dynamic;
+
+	pattern_len = strlen (pattern);
+
+	while (g_io_channel_read_line (channel, &str, NULL, NULL, NULL) != G_IO_STATUS_EOF) {
+		if (!strncmp (str, pattern, pattern_len)) {
+			if (!strncmp (str + pattern_len, "\"yes\"", 5))
+				dynamic = TRUE;
+			break;
+		}
+		g_free (str);
+	}
+
+	g_io_channel_shutdown (channel, FALSE, NULL);
+	g_io_channel_unref (channel);
+
+	return dynamic;
+}
+
+static char *
+hostname_read ()
+{
+	GIOChannel *channel;
+	char *hostname = NULL;
+
+	channel = g_io_channel_new_file (HOSTNAME_FILE, "r", NULL);
+	if (channel) {
+		g_io_channel_read_line (channel, &hostname, NULL, NULL, NULL);
+		g_io_channel_shutdown (channel, FALSE, NULL);
+		g_io_channel_unref (channel);
+
+		if (hostname)
+			hostname = g_strchomp (hostname);
+	}
+
+	return hostname;
+}
+
+static void
+hostname_changed (gpointer data)
+{
+	SCPluginChumbyPrivate *priv = SC_PLUGIN_CHUMBY_GET_PRIVATE (data);
+
+	g_free (priv->hostname);
+	if (hostname_is_dynamic ())
+		priv->hostname = NULL;
+	else
+		priv->hostname = hostname_read ();
+
+	g_object_notify (G_OBJECT (data), NM_SYSTEM_CONFIG_INTERFACE_HOSTNAME);
+}
+
+static void
+plugin_set_hostname (SCPluginChumby *plugin, const char *hostname)
+{
+	SCPluginChumbyPrivate *priv = SC_PLUGIN_CHUMBY_GET_PRIVATE (plugin);
+	GIOChannel *channel;
+
+	channel = g_io_channel_new_file (HOSTNAME_FILE, "w", NULL);
+	if (channel) {
+		g_io_channel_write_chars (channel, hostname, -1, NULL, NULL);
+		g_io_channel_write_chars (channel, "\n", -1, NULL, NULL);
+		g_io_channel_shutdown (channel, TRUE, NULL);
+		g_io_channel_unref (channel);
+	}
+
+	g_free (priv->hostname);
+	priv->hostname = hostname ? g_strdup (hostname) : NULL;
+}
+
+static void
+init (NMSystemConfigInterface *config)
+{
+	SCPluginChumbyPrivate *priv = SC_PLUGIN_CHUMBY_GET_PRIVATE (config);
+
+	priv->hostname_monitor = monitor_file_changes (HOSTNAME_FILE, hostname_changed, config);
+	priv->dhcp_monitor = monitor_file_changes (CONFIG_FILE, reload_configs, config);
+
+	if (!hostname_is_dynamic ())
+		priv->hostname = hostname_read ();
+
+	reload_configs(config);
+}
+
+static void
+sc_plugin_chumby_init (SCPluginChumby *self)
+{
+}
+
+static void
+dispose (GObject *object)
+{
+	SCPluginChumbyPrivate *priv = SC_PLUGIN_CHUMBY_GET_PRIVATE (object);
+
+	if (priv->dhcp_monitor)
+		g_object_unref (priv->dhcp_monitor);
+
+	if (priv->hostname_monitor)
+		g_object_unref (priv->hostname_monitor);
+
+	g_free (priv->hostname);
+
+	G_OBJECT_CLASS (sc_plugin_chumby_parent_class)->dispose (object);
+}
+
+static void
+get_property (GObject *object, guint prop_id,
+		    GValue *value, GParamSpec *pspec)
+{
+	switch (prop_id) {
+	case NM_SYSTEM_CONFIG_INTERFACE_PROP_NAME:
+		g_value_set_string (value, CHUMBY_PLUGIN_NAME);
+		break;
+	case NM_SYSTEM_CONFIG_INTERFACE_PROP_INFO:
+		g_value_set_string (value, CHUMBY_PLUGIN_INFO);
+		break;
+	case NM_SYSTEM_CONFIG_INTERFACE_PROP_CAPABILITIES:
+		g_value_set_uint (value, NM_SYSTEM_CONFIG_INTERFACE_CAP_MODIFY_HOSTNAME);
+		break;
+	case NM_SYSTEM_CONFIG_INTERFACE_PROP_HOSTNAME:
+		g_value_set_string (value, SC_PLUGIN_CHUMBY_GET_PRIVATE (object)->hostname);
+		break;
+	default:
+		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+		break;
+	}
+}
+
+static void
+set_property (GObject *object, guint prop_id,
+		    const GValue *value, GParamSpec *pspec)
+{
+	const char *hostname;
+
+	switch (prop_id) {
+	case NM_SYSTEM_CONFIG_INTERFACE_PROP_HOSTNAME:
+		hostname = g_value_get_string (value);
+		if (hostname && strlen (hostname) < 1)
+			hostname = NULL;
+		plugin_set_hostname (SC_PLUGIN_CHUMBY (object), hostname);
+		break;
+	default:
+		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+		break;
+	}
+}
+
+static void
+sc_plugin_chumby_class_init (SCPluginChumbyClass *req_class)
+{
+	GObjectClass *object_class = G_OBJECT_CLASS (req_class);
+
+	g_type_class_add_private (req_class, sizeof (SCPluginChumbyPrivate));
+
+	object_class->get_property = get_property;
+	object_class->set_property = set_property;
+	object_class->dispose = dispose;
+
+	g_object_class_override_property (object_class,
+							    NM_SYSTEM_CONFIG_INTERFACE_PROP_NAME,
+							    NM_SYSTEM_CONFIG_INTERFACE_NAME);
+
+	g_object_class_override_property (object_class,
+							    NM_SYSTEM_CONFIG_INTERFACE_PROP_INFO,
+							    NM_SYSTEM_CONFIG_INTERFACE_INFO);
+
+	g_object_class_override_property (object_class,
+							    NM_SYSTEM_CONFIG_INTERFACE_PROP_CAPABILITIES,
+							    NM_SYSTEM_CONFIG_INTERFACE_CAPABILITIES);
+
+	g_object_class_override_property (object_class,
+							    NM_SYSTEM_CONFIG_INTERFACE_PROP_HOSTNAME,
+							    NM_SYSTEM_CONFIG_INTERFACE_HOSTNAME);
+}
+
+static void
+system_config_interface_init (NMSystemConfigInterface *system_config_interface_class)
+{
+	/* interface implementation */
+	system_config_interface_class->init = init;
+	system_config_interface_class->get_connections = get_connections;
+}
+
+G_MODULE_EXPORT GObject *
+nm_system_config_factory (void)
+{
+	static SCPluginChumby *singleton = NULL;
+
+	if (!singleton)
+		singleton = SC_PLUGIN_CHUMBY (g_object_new (SC_TYPE_PLUGIN_CHUMBY, NULL));
+	else
+		g_object_ref (singleton);
+
+	return G_OBJECT (singleton);
+}
