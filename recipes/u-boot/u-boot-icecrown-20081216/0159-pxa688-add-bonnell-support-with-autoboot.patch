From c4aaf139c2dfce34bf53bdd79cb3c4ba310b9696 Mon Sep 17 00:00:00 2001
From: Mingliang Hu <mingliang.hu@marvell.com>
Date: Tue, 15 Dec 2009 19:20:58 +0800
Subject: [PATCH] pxa688: add bonnell support with autoboot

Signed-off-by: Mingliang Hu <mingliang.hu@marvell.com>
---
 board/pxa/common/Makefile                    |    1 +
 board/pxa/common/mmp2_freq_ll.S              |  130 +++++++++++++++++++++++
 board/pxa/jasper/jasper.c                    |  147 ++++++++++++++++++++++++--
 drivers/mtd/nand/pxa3xx_nand.c               |  132 ++++++++++--------------
 include/asm-arm/arch-pxa688/nand_supported.h |    2 +-
 include/configs/mmp2_jasper.h                |   34 ++++---
 6 files changed, 342 insertions(+), 104 deletions(-)
 create mode 100644 board/pxa/common/mmp2_freq_ll.S
 mode change 100644 => 100755 include/configs/mmp2_jasper.h

diff --git a/board/pxa/common/Makefile b/board/pxa/common/Makefile
index ea2605c..896804b 100644
--- a/board/pxa/common/Makefile
+++ b/board/pxa/common/Makefile
@@ -31,6 +31,7 @@ LIB	= $(obj)lib$(VENDOR).a
 
 SOBJS-y				+= freq_ll.o
 SOBJS-y				+= hibernate.o
+SOBJS-y				+= mmp2_freq_ll.o
 
 COBJS-y				+= common.o
 COBJS-y				+= boot.o
diff --git a/board/pxa/common/mmp2_freq_ll.S b/board/pxa/common/mmp2_freq_ll.S
new file mode 100644
index 0000000..22e84c8
--- /dev/null
+++ b/board/pxa/common/mmp2_freq_ll.S
@@ -0,0 +1,130 @@
+/*
+ * Low-level frequency change code
+ *
+ * Copyright (C) 2009, Marvell Semicondutor.
+ *
+ * This software program is licensed subject to the GNU General Public License
+ * (GPL).Version 2,June 1991, available at http://www.fsf.org/copyleft/gpl.html
+ */
+
+	.global mmp2_freq_init_sram, mmp2_freq_chg_seq
+
+@******************************************************************************
+@
+@ freq_init_sram
+@
+@ Copy frequency change code into ISRAM
+@
+@ Inputs:
+@	r0 = Start address of relocated program
+@
+@ Outputs:
+@	None
+@
+
+mmp2_freq_init_sram:
+	stmfd	sp!, {r0 - r12, lr}
+	ldr	r3, =mmp2_freq_sram_start
+	ldr	r4, =mmp2_freq_sram_end
+	add	r4, r4, #0x20
+
+rel_ram:
+	ldmia	r3!, {r5 - r12}
+	stmia	r0!, {r5 - r12}
+	cmp	r3, r4
+	ble	rel_ram
+
+	ldmfd	sp!, {r0 - r12, pc}
+
+@******************************************************************************
+@
+@ freq_chg_seq
+@
+@ frequency change sequence
+@
+@ Inputs:
+@	r0 = Start address of relocated program
+@	r1 = Start address of relocated stack
+@	r2 = operating points
+@
+@ Outputs:
+@	None
+@
+
+#define PMUM_FCCR_OFF	0x0008
+#define PMUA_CC_AP_OFF	0x0004
+
+mmp2_freq_chg_seq:
+
+	@ save registers on stack
+	stmfd	sp!, {r3 - r12, lr}
+
+	mov	r12, r0			@ save start address of program in r12
+	mov	r11, r1			@ save start address of stack in r11
+	mov	r10, sp			@ save sp in r10
+	mov	sp, r11			@ set up new stack address
+	stmfd	sp!, {lr}		@ store the return address
+
+	ldr	r4, =0xd0000000		@ DMEM base address
+	ldr	r5, =0xd4050000		@ PMUM base address
+	ldr	r6, =0xd4282800		@ PMUA base address
+
+	mov	pc, r0
+
+mmp2_freq_sram_start:
+	b	1f
+	.align  5
+1:
+	@ frequency change sequence
+	ldr	r7, =0xffffffff
+	str	r7, [r5, #0x24]
+
+	ldr	r7, =0x086003e2
+	str	r7, [r5, #0x414]
+
+	ldr	r7, =0x00FFFE00
+	str	r7, [r5, #0x34]
+
+	ldr	r7, =0x00223A00
+	str	r7, [r5, #0x34]
+
+	ldr	r7, =0x00223B00
+	str	r7, [r5, #0x34]
+
+	ldr	r7, =0x286003e2
+	str	r7, [r5, #0x414]
+
+	ldr	r7, =0x00061808
+	str	r7, [r6, #0x88]
+
+	ldr	r7, =0x08FD0248
+	str	r7, [r6, #0x0]
+
+	ldr	r7, =0x48FD0248
+	str	r7, [r6, #0x4]
+
+	ldr	r7, =0x08FD0248
+	str	r7, [r6, #0x0]
+
+	ldr	r7, =0x28FD0248
+	str	r7, [r6, #0x4]
+
+	ldr	r7, =0x08FD0248
+	str	r7, [r6, #0x0]
+
+	ldr	r7, =0x41000000
+	str	r7, [r5, #PMUM_FCCR_OFF]
+
+	ldr	r7, =0x18FD0248
+	str	r7, [r6, #0x4]
+
+
+	@ ddr caliberation
+
+	ldmfd	sp!, {lr}
+	mov	sp, r10				@ restore stack address
+
+        ldmfd   sp!, {r3 - r12, pc}
+
+mmp2_freq_sram_end:
+	nop
diff --git a/board/pxa/jasper/jasper.c b/board/pxa/jasper/jasper.c
index a4c45eb..f9f45bc 100644
--- a/board/pxa/jasper/jasper.c
+++ b/board/pxa/jasper/jasper.c
@@ -131,19 +131,117 @@ int board_init (void)
     /* Turn on clock gating (PMUM_CGR_SP) */
     /**(volatile unsigned int *)0xd4050024 = 0x0818e33c;*/
     /* Turn on clock gating (PMUM_CGR_PJ) */
-    *(volatile unsigned int *)0xd4051024 = 0x0818e33c;
+    *(volatile unsigned int *)0xd4051024 = 0xffffffff;
+	
+    *(volatile unsigned int *)0xD42828dc = 0x1FFFF;
 
     /* AIB clock */
     *(volatile unsigned int *)0xD4015064 = 0x7;
     *(volatile unsigned int *)0xD4015064 = 0x3;
-	
-    /* Below is for IRE */
-    *(volatile unsigned int *)0xd4282848 = 0x00000008;
-    *(volatile unsigned int *)0xd4282848 = 0x00000009;
 
     /* UART3 clk */
     *(volatile unsigned int *)0xD4015034 = 0x3 | (1<<4); /*26MHz clock*/
 
+	reg = *(volatile unsigned int *)0xD401E160;
+	reg |= 1<<14; 
+	*(volatile unsigned int *)0xD401E160 = reg;
+
+	BU_REG_WRITE(0xd4015000, 0x83 );
+
+	//APB TIMER clock
+    *(volatile unsigned int *)0xd4015024 = 0x5;
+    *(volatile unsigned int *)0xd4015024 = 0x33;
+
+	reg = *(volatile unsigned int *)0xd4282c08;
+	reg |= (1<<6) | (1<<9) | (1<<14) | (1<<19) | (1<<13); 
+	reg &= ~(1<<23);
+	*(volatile unsigned int *)0xd4282c08 = reg;
+
+#ifdef CONFIG_MMP2_400_OP
+    *(volatile unsigned int *)0xd4050414=0x08600262;
+    *(volatile unsigned int *)0xd4050034=0x00FFFE00;
+    *(volatile unsigned int *)0xd4050034=0x00216A00;
+    *(volatile unsigned int *)0xd4050034=0x00216B00;
+    *(volatile unsigned int *)0xd4050414=0x28600262;
+
+    *(volatile unsigned int *)0xd4050024=0xffffffff;
+    *(volatile unsigned int *)0xd4050008=0x41000000;
+    *(volatile unsigned int *)0xd4282888=0x00061808;
+    *(volatile unsigned int *)0xd4282800=0x08FC8248;
+    *(volatile unsigned int *)0xd4282804=0x48FC8248;
+    *(volatile unsigned int *)0xd4282800=0x08FC8248;
+    *(volatile unsigned int *)0xd4282804=0x28FC8248;
+    *(volatile unsigned int *)0xd4282800=0x08FC8248;
+    *(volatile unsigned int *)0xd4282804=0x18FC8248;
+#endif
+
+#ifdef CONFIG_MMP2_600_OP
+    *(volatile unsigned int *)0xd4050414=0x086003A2;
+    *(volatile unsigned int *)0xd4050034=0x00FFFE00;
+    *(volatile unsigned int *)0xd4050034=0x00222200;
+    *(volatile unsigned int *)0xd4050034=0x00222300;
+    *(volatile unsigned int *)0xd4050414=0x286003A2;
+
+    *(volatile unsigned int *)0xd4050024=0xffffffff;
+    *(volatile unsigned int *)0xd4050008=0x41000000;
+    *(volatile unsigned int *)0xd4282888=0x00061808;
+    *(volatile unsigned int *)0xd4282800=0x08FD0248;
+    *(volatile unsigned int *)0xd4282804=0x48fd0248;
+    *(volatile unsigned int *)0xd4282800=0x08fd0248;
+    *(volatile unsigned int *)0xd4282804=0x28fd0248;
+    *(volatile unsigned int *)0xd4282800=0x08fd0248;
+    *(volatile unsigned int *)0xd4282804=0x18fd0248;
+#endif
+
+#ifdef CONFIG_MMP2_624_OP
+    *(volatile unsigned int *)0xd4050414=0x086003e2;
+    *(volatile unsigned int *)0xd4050034=0x00FFFE00;
+    *(volatile unsigned int *)0xd4050034=0x00223A00;
+    *(volatile unsigned int *)0xd4050034=0x00223B00;
+    *(volatile unsigned int *)0xd4050414=0x286003e2;
+
+    *(volatile unsigned int *)0xd4050008=0x41000000;
+    *(volatile unsigned int *)0xd4282888=0x00061808;
+    *(volatile unsigned int *)0xd4282800=0x08fd0248;
+    *(volatile unsigned int *)0xd4282804=0x48fd0248;
+    *(volatile unsigned int *)0xd4282800=0x08fd0248;
+    *(volatile unsigned int *)0xd4282804=0x28fd0248;
+    *(volatile unsigned int *)0xd4282800=0x08fd0248;
+    *(volatile unsigned int *)0xd4282804=0x18fd0248;
+#endif
+
+	//mmp2_freq_init_sram(0xd1020000);
+	//mmp2_freq_chg_seq(0xd1020000, 0xd1026000, 0);
+
+
+    *(volatile unsigned int *)0xd4282110 = 0x0;
+
+    *(volatile unsigned int *)0xd4283894 = 0x11000008;
+
+    *(volatile unsigned int *)0xd428290c = 0x600;
+    *(volatile unsigned int *)0xd428290c = 0x610;
+    *(volatile unsigned int *)0xd428290c = 0x710;
+    *(volatile unsigned int *)0xd428290c = 0x712;
+
+    *(volatile unsigned int *)0xd4050040 = 0xd0080040;
+    *(volatile unsigned int *)0xd4050044 = 0xd0040040;
+    *(volatile unsigned int *)0xd42a0c3c = 0x10800;
+    *(volatile unsigned int *)0xd42a0c34 = 0x211921;
+
+    *(volatile unsigned int *)0xd428285c = 0x8;
+    *(volatile unsigned int *)0xd428285c = 0x9;
+    *(volatile unsigned int *)0xd42828f8 = 0x18;
+    *(volatile unsigned int *)0xd42828f8 = 0x1b;
+    *(volatile unsigned int *)0xd42828fc = 0x18;
+    *(volatile unsigned int *)0xd42828fc = 0x1b;
+    *(volatile unsigned int *)0xd4282900 = 0x18;
+    *(volatile unsigned int *)0xd4282900 = 0x1b;
+
+
+    /* Below is for IRE */
+    *(volatile unsigned int *)0xd4282848 = 0x00000008;
+    *(volatile unsigned int *)0xd4282848 = 0x00000009;
+
     /* TWSI1 clk*/
     *(volatile unsigned int *)0xD4015004 = 0x3; 
     dummy_delay(99999);
@@ -156,8 +254,32 @@ int board_init (void)
     //*(volatile unsigned int *)0xd42820c=0x1712;
 
     /* vmeta clock*/
-    //*(volatile unsigned int *)0xd4282a4=0x718;
-    //*(volatile unsigned int *)0xd4282a4=0x71B;
+    reg = *(volatile unsigned int *)0xd42828a4;
+	reg |= (3<<9);
+	reg &= (~(1<<9));
+    *(volatile unsigned int *)0xd42828a4=reg;
+	reg |= (1<<3);
+    *(volatile unsigned int *)0xd42828a4=reg;
+	reg |= (1<<0);
+    *(volatile unsigned int *)0xd42828a4=reg;
+	reg |= (1<<4);
+    *(volatile unsigned int *)0xd42828a4=reg;
+	reg |= (1<<1);
+    *(volatile unsigned int *)0xd42828a4=reg;
+	reg |= (1<<5);
+    *(volatile unsigned int *)0xd42828a4=reg;
+	reg |= (1<<2);
+    *(volatile unsigned int *)0xd42828a4=reg;
+	reg |= (1<<8);
+    *(volatile unsigned int *)0xd42828a4=reg;
+	reg &= (~(1<<9));
+	reg &= (~(1<<6));
+    *(volatile unsigned int *)0xd42828a4=reg;
+
+    *(volatile unsigned int *)0xd428284c=(1<<3);
+    *(volatile unsigned int *)0xd428284c=(1<<3) | 1;
+    *(volatile unsigned int *)0xd428284c=(1<<3) | 1 | (1<<4);
+    *(volatile unsigned int *)0xd428284c=(1<<3) | 1 | (1<<4) | (1<<1);
 
     /* enable GPIO clock */
     *(volatile unsigned int *)0xd4015038=0x03;
@@ -193,21 +315,22 @@ int board_init (void)
 #ifdef CONFIG_PJ4_NON_SECURE_MODE
     gd->bd->bi_boot_params = 0x00200100;
 #else
-    gd->bd->bi_boot_params = 0x00000100;
+    gd->bd->bi_boot_params = 0x00200100;
 #endif
     gd->baudrate = CONFIG_BAUDRATE;
 
 	BU_REG_WRITE( APBC_AIB_CLK_RST, APBC_AIB_CLK_RST_FNCLK  |
 		APBC_AIB_CLK_RST_APBCLK );
 
-    BU_REG_WRITE( SMC_CSDFICFGX, 0x51890009 );              // SMC_CSDFICFG0
-    BU_REG_WRITE( SMC_CSADRMAPX, 0x10000F00 );              // SMC_CSADRMAP0
+    //BU_REG_WRITE( SMC_CSDFICFGX, 0x51890009 );              // SMC_CSDFICFG0
+    //BU_REG_WRITE( SMC_CSADRMAPX, 0x10000F00 );              // SMC_CSADRMAP0
 	//BU_REG_WRITE(0xd4283824, 0xC6CFF2C9 );
-	//BU_REG_WRITE(0xd4283894, 0x11000009 );
+	BU_REG_WRITE(0xd4283894, 0x11000008 );
 
 	BU_REG_WRITE(0xd4015000, 0x83 );
 	BU_REG_WRITE(0xd4015074, 0x3 );
 	BU_REG_WRITE(0xd4282864, 0x9 );
+	BU_REG_WRITE(0xd4282860, 0xb8);
 	BU_REG_WRITE(0xd4282860, 0xbf);
 
 	/*configure for MFP*/
@@ -219,6 +342,8 @@ int board_init (void)
     //pxa3xx_mfp_set_pull(MFP_CFG_PIN(GPIO48_UART2_TXD), MFP_PULL_HIGH);
     //pxa3xx_mfp_set_pull(MFP_CFG_PIN(DF_RDY0_DF_RDY0), MFP_PULL_HIGH);
 
+    *(volatile unsigned int *)0xd4283024=0;
+
     return 0;
 }
 
diff --git a/drivers/mtd/nand/pxa3xx_nand.c b/drivers/mtd/nand/pxa3xx_nand.c
index ce48313..fbf155d 100644
--- a/drivers/mtd/nand/pxa3xx_nand.c
+++ b/drivers/mtd/nand/pxa3xx_nand.c
@@ -33,7 +33,7 @@
 
 /* convert nano-seconds to nand flash controller clock cycles */
 #define ns2cycle(ns, clk)	(int)(((ns) * (clk / 1000000) / 1000) + 1)
-#define	CHIP_DELAY_TIMEOUT	(500)
+#define	CHIP_DELAY_TIMEOUT	(10000)
 #define BCH_THRESHOLD 		(8)
 #define PAGE_CHUNK_SIZE		(2048)
 #define OOB_CHUNK_SIZE		(64)
@@ -365,7 +365,7 @@ static int prepare_command_poll(struct pxa3xx_nand *nand, int command,
 		uint16_t column, int page_addr)
 {
 	uint16_t cmd;
-	int addr_cycle = 0, exec_cmd = 1, ndcb0_csel,  i;
+	int addr_cycle = 0, exec_cmd = 1, ndcb0_csel,  i, chunks;
 	struct mtd_info *mtd = nand->mtd[nand->chip_select];
 	struct pxa3xx_nand_info *info = mtd->priv;
 	struct nand_chip *chip = mtd->priv;
@@ -392,6 +392,7 @@ static int prepare_command_poll(struct pxa3xx_nand *nand, int command,
 	nand->errcode		= ERR_NONE;
 	nand->bad_count		= 0;
 
+	chunks = flash_info->page_size / PAGE_CHUNK_SIZE;
 	addr_cycle = NDCB0_ADDR_CYC(info->row_addr_cycles  	    \
 			+ info->col_addr_cycles);
 
@@ -417,43 +418,23 @@ static int prepare_command_poll(struct pxa3xx_nand *nand, int command,
 		}
 
 		pxa3xx_set_datasize(info);
+                info->total_cmds = chunks + 1;
 
-		if (flash_info->page_size > PAGE_CHUNK_SIZE) {
-			/* need addressing at second command cycle */
-			info->need_addressing = 1;
-			info->need_wait_ready = 2;
-			info->ndcb0[0] |= NDCB0_CMD_TYPE(0x6) 	    \
-					  | NDCB0_NC  		    \
-					  | addr_cycle		    \
-					  | NDCB0_CMD2_MASK;
-
-			info->ndcb0[1] |= NDCB0_CMD_TYPE(0x7) 	    \
-					  | NDCB0_NC  		    \
-					  | addr_cycle		    \
-					  | NDCB0_CMD2_MASK;
-
-			info->ndcb0[2] |= NDCB0_CMD_TYPE(0x6) 	    \
-					  | NDCB0_NC  		    \
-					  | addr_cycle		    \
-					  | NDCB0_CMD2_MASK	    \
-					  | ((cmd >> 8) & NDCB0_CMD1_MASK);
-
-			info->ndcb0[3] |= NDCB0_CMD_XTYPE(0x5) 	    \
-					  | NDCB0_NC 		    \
-					  | addr_cycle		    \
-					  | (cmd & NDCB0_CMD2_MASK) \
-					  | NDCB0_CMD1_MASK;
-
-			info->ndcb0[4] = info->ndcb0[3];
-			info->ndcb0[4] &= ~NDCB0_NC;
-		}
-		else {
-			info->need_wait_ready = 0;
-			info->ndcb0[0] |= NDCB0_CMD_TYPE(0)	    \
-					  | NDCB0_DBC		    \
-					  | addr_cycle		    \
-					  | cmd;
-		}
+                info->ndcb0[0] |= NDCB0_CMD_XTYPE(0x6)
+                                | NDCB0_CMD_TYPE(0)
+                                | NDCB0_DBC
+                                | NDCB0_NC
+                                | addr_cycle
+                                | cmd;
+
+                info->ndcb0[1] |= NDCB0_CMD_XTYPE(0x5)
+                                | NDCB0_NC
+                                | addr_cycle;
+
+                for (i = 2; i <= chunks; i ++)
+                        info->ndcb0[i] = info->ndcb0[1];
+
+                info->ndcb0[chunks] &= ~NDCB0_NC;
 
 		break;
 
@@ -462,44 +443,31 @@ static int prepare_command_poll(struct pxa3xx_nand *nand, int command,
 
 		nand->is_write = 1;
 		pxa3xx_set_datasize(info);
-		if (flash_info->page_size > PAGE_CHUNK_SIZE) {
-			/* need addressing at second command cycle */
-			info->need_addressing = 1;
-			info->need_wait_ready = 5;
-			info->ndcb0[0] |= NDCB0_CMD_TYPE(0x6) 	    \
-					  | NDCB0_NC  		    \
-					  | (cmd & NDCB0_CMD1_MASK) \
-					  | addr_cycle;
-
-			info->ndcb0[1] |= NDCB0_CMD_TYPE(0xF) 	    \
-					  | NDCB0_NC  		    \
-					  | (cmd & NDCB0_CMD1_MASK) \
-					  | addr_cycle;
-
-			info->ndcb0[2] |= NDCB0_CMD_XTYPE(0x5)	    \
-					  | NDCB0_NC 		    \
-					  | NDCB0_AUTO_RS 	    \
-					  | NDCB0_CMD_TYPE(0x1)	    \
-					  | addr_cycle;
-
-			info->ndcb0[3] = info->ndcb0[2];
-
-			info->ndcb0[4] |= NDCB0_CMD_XTYPE(0x3)	    \
-					  | NDCB0_ST_ROW_EN	    \
-					  | NDCB0_DBC   	    \
-					  | NDCB0_CMD_TYPE(0x1)     \
-					  | (cmd & NDCB0_CMD2_MASK) \
-					  | NDCB0_CMD1_MASK	    \
-					  | addr_cycle;
-		}
-		else {
-			info->need_wait_ready = 0;
-			info->ndcb0[0] |= NDCB0_CMD_TYPE(1)	    \
-					  | NDCB0_AUTO_RS	    \
-					  | NDCB0_DBC		    \
-					  | cmd			    \
-					  | addr_cycle;
-		}
+                info->total_cmds = chunks + 1;
+                info->need_wait_ready = chunks + 1;
+
+                info->ndcb0[0] |= NDCB0_CMD_XTYPE(0x4)
+                                | NDCB0_CMD_TYPE(0x1)
+                                | NDCB0_NC
+                                | NDCB0_AUTO_RS
+                                | (cmd & NDCB0_CMD1_MASK)
+                                | addr_cycle;
+
+                for (i = 1; i < chunks; i ++)
+                        info->ndcb0[i] |= NDCB0_CMD_XTYPE(0x5)
+                                        | NDCB0_NC
+                                        | NDCB0_AUTO_RS
+                                        | NDCB0_CMD_TYPE(0x1)
+                                        | addr_cycle;
+
+                info->ndcb0[chunks] |= NDCB0_CMD_XTYPE(0x3)
+                                | NDCB0_CMD_TYPE(0x1)
+                                | NDCB0_ST_ROW_EN
+                                | NDCB0_DBC
+                                | (cmd & NDCB0_CMD2_MASK)
+                                | NDCB0_CMD1_MASK
+                                | addr_cycle;
+
 
 		break;
 
@@ -1037,13 +1005,23 @@ static int pxa3xx_nand_sensing(struct pxa3xx_nand_info *info, int cs)
 	struct pxa3xx_nand *nand = info->nand_data;;
 	const struct pxa3xx_nand_flash *f = &nand_common;
 	struct mtd_info *mtd = nand->mtd[cs];
-
+	int i=0;
 	nand->wait_mode = 1;
 	pxa3xx_nand_config_flash(info, f);
 	pxa3xx_nand_cmdfunc(mtd, NAND_CMD_RESET, 0, 0);
 	nand->wait_mode = 0;
 
 #if CONFIG_CPU_PXA688
+	while(nand->is_ready == 0){
+		i++;
+		udelay(10000);
+		nand->wait_mode = 1;
+		pxa3xx_nand_config_flash(info, f);
+		pxa3xx_nand_cmdfunc(mtd, NAND_CMD_RESET, 0, 0);
+		nand->wait_mode = 0;
+		if(i==50)
+			break;
+	}
 	return 1;
 #endif
 
diff --git a/include/asm-arm/arch-pxa688/nand_supported.h b/include/asm-arm/arch-pxa688/nand_supported.h
index 2c56b36..467f6b8 100644
--- a/include/asm-arm/arch-pxa688/nand_supported.h
+++ b/include/asm-arm/arch-pxa688/nand_supported.h
@@ -34,7 +34,7 @@ static struct pxa3xx_nand_timing common_timing = {
 	.tWP	= 100,
 	.tRH	= 80,
 	.tRP	= 100,
-	.tR	= 60000,
+	.tR	= 120000,
 	.tWHR	= 400,
 	.tAR	= 40,
 };
diff --git a/include/configs/mmp2_jasper.h b/include/configs/mmp2_jasper.h
old mode 100644
new mode 100755
index 33b10f4..f1479bb
--- a/include/configs/mmp2_jasper.h
+++ b/include/configs/mmp2_jasper.h
@@ -43,6 +43,10 @@
 #define CONFIG_SYS_BOARD_NAME		"ARM1176JZF based"
 #define CONFIG_SYS_VENDOR_NAME     	"MARVELL"
 
+#undef CONFIG_MMP2_400_OP
+#undef CONFIG_MMP2_600_OP
+#define CONFIG_MMP2_624_OP	1
+
 #ifdef CONFIG_PJ4_NON_SECURE_MODE
 #define CONFIG_SYS_UBOOT_BASE		0x1100000	
 #define CONFIG_SYS_MEMTEST_START      	0x00300000
@@ -109,35 +113,35 @@
 #define CONFIG_SYS_BOOTARGS_ROOT    	"root=/dev/nfs rw init=/linuxrc"
 #define CONFIG_ZERO_BOOTDELAY_CHECK
 #ifdef CONFIG_PJ4_NON_SECURE_MODE
-#define CONFIG_SYS_LOAD_ADDR        	0x00700000   /* default load address   */
-#define CONFIG_SYS_DEF_LOAD_ADDR    	"0x00700000"
+#define CONFIG_SYS_LOAD_ADDR        	0x01100000   /* default load address   */
+#define CONFIG_SYS_DEF_LOAD_ADDR    	"0x01100000"
 #else
-#define CONFIG_SYS_LOAD_ADDR        	0x00500000   /* default load address   */
-#define CONFIG_SYS_DEF_LOAD_ADDR    	"0x00500000"
+#define CONFIG_SYS_LOAD_ADDR        	0x01100000   /* default load address   */
+#define CONFIG_SYS_DEF_LOAD_ADDR    	"0x01100000"
 #endif
 #define CONFIG_SYS_IMG_NAME		"zImage"
 #define CONFIG_SYS_INITRD_NAME      	"ramdisk.image.gz"
 #ifdef CONFIG_PJ4_NON_SECURE_MODE
-#define CONFIG_SYS_INITRD_LOAD_ADDR 	"a00000"
+#define CONFIG_SYS_INITRD_LOAD_ADDR 	"1500000"
 #else
-#define CONFIG_SYS_INITRD_LOAD_ADDR 	"800000"
+#define CONFIG_SYS_INITRD_LOAD_ADDR 	"1500000"
 #endif
 #define CONFIG_SYS_INITRD_SIZE      	"400000"
 #undef  CONFIG_BOOTARGS
 
-#define CONFIG_BOOTDELAY        	10
+#define CONFIG_BOOTDELAY        	3
 
 #if (CONFIG_BOOTDELAY >= 0)
 
 /* boot arguments" */
 #ifdef CONFIG_PJ4_NON_SECURE_MODE
-#define CONFIG_ONENANDBOOT	     	"onenand read 0x700000 0x920000 0x300000"
-#define CONFIG_NANDBOOT 	     	"nand read 0x700000 0x920000 0x300000"
-#define CONFIG_BOOTCOMMAND      	"setenv autoboot boot; bootz 0x700000; setenv autoboot none"
+#define CONFIG_ONENANDBOOT	     	"onenand read 0x1100000 0x980000 0x300000"
+#define CONFIG_NANDBOOT 	     	"nand read 0x1100000 0x980000 0x300000"
+#define CONFIG_BOOTCOMMAND      	"setenv autoboot boot; bootz 0x1100000; setenv autoboot none"
 #else
-#define CONFIG_ONENANDBOOT	     	"onenand read 0x500000 0x920000 0x300000"
-#define CONFIG_NANDBOOT 	     	"nand read 0x500000 0x920000 0x300000"
-#define CONFIG_BOOTCOMMAND      	"setenv autoboot boot; bootz 0x500000; setenv autoboot none"
+#define CONFIG_ONENANDBOOT	     	"onenand read 0x1100000 0x980000 0x300000"
+#define CONFIG_NANDBOOT 	     	"nand read 0x1100000 0x980000 0x300000"
+#define CONFIG_BOOTCOMMAND      	"setenv autoboot boot; bootz 0x1100000; setenv autoboot none"
 #endif
 #define CONFIG_ROOTPATH   		/tftpboot/rootfs_arm
 
@@ -196,8 +200,8 @@
 #define PHYS_SDRAM_SIZE_DEC     	126
 #else
 #define PHYS_SDRAM_1            	0x00000000   /* SDRAM Bank #1 */
-#define PHYS_SDRAM_1_SIZE       	0x08000000   /* 128 MB */
-#define PHYS_SDRAM_SIZE_DEC     	128
+#define PHYS_SDRAM_1_SIZE       	0x10000000   /* 128 MB */
+#define PHYS_SDRAM_SIZE_DEC     	256
 #endif
 #define CONFIG_SYS_ENV_SIZE            	0x10000   /* Total Size of Environment Sector */
 #define	CONFIG_ENV_IS_NOWHERE		1
-- 
1.6.0.4

