From a14141fcce547e2253419f60f74b905bf9798def Mon Sep 17 00:00:00 2001
From: Mingliang Hu <mhu4@marvell.com>
Date: Mon, 19 Apr 2010 15:16:45 +0800
Subject: [PATCH] pxa688: fix mips bug on mmp2

Signed-off-by: Mingliang Hu <mhu4@marvell.com>
---
 board/pxa/common/freq.c |  134 +++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 134 insertions(+), 0 deletions(-)

diff --git a/board/pxa/common/freq.c b/board/pxa/common/freq.c
index ac77905..a3afdce 100644
--- a/board/pxa/common/freq.c
+++ b/board/pxa/common/freq.c
@@ -559,6 +559,137 @@ static unsigned long loops_per_sec;
 		(*(volatile ulong *)(CONFIG_SYS_TIMERBASE+0xa4) = 0x1, \
 		*(volatile ulong *)(CONFIG_SYS_TIMERBASE+0xa4))
 
+#ifdef CONFIG_CPU_PXA688
+#define PMNC_MASK	0x3f		/* Mask for writable bits */
+#define PMNC_E		(1 << 0)	/* Enable all counters */
+#define PMNC_P		(1 << 1)	/* Reset all counters */
+#define PMNC_C		(1 << 2)	/* Cycle counter reset */
+#define PMNC_D		(1 << 3)	/* CCNT counts every 64th cpu cycle */
+#define PMNC_X		(1 << 4)	/* Export to ETM */
+#define PMNC_DP		(1 << 5)	/* Disable CCNT if non-invasive debug*/
+
+#define FLAG_C		(1 << 31)
+#define FLAG_MASK	0x8000000f	/* Mask for writable bits */
+
+#define CNTENC_C	(1 << 31)
+#define CNTENC_MASK	0x8000000f	/* Mask for writable bits */
+
+#define CNTENS_C	(1 << 31)
+#define CNTENS_MASK	0x8000000f	/* Mask for writable bits */
+
+static inline u32 armv7_pmnc_read(void)
+{
+	u32 val;
+
+	asm volatile("mrc p15, 0, %0, c9, c12, 0" : "=r" (val));
+	return val;
+}
+
+static inline void armv7_pmnc_write(u32 val)
+{
+	val &= PMNC_MASK;
+	asm volatile("mcr p15, 0, %0, c9, c12, 0" : : "r" (val));
+}
+
+static inline void armv7_pmnc_disable_counter()
+{
+	u32 val;
+
+	val = CNTENC_C;
+
+	val &= CNTENC_MASK;
+	asm volatile("mcr p15, 0, %0, c9, c12, 2" : : "r" (val));
+}
+
+static void armv7_pmnc_reset_counter()
+{
+	u32 val = 0;
+
+	asm volatile("mcr p15, 0, %0, c9, c13, 0" : : "r" (val));
+}
+
+
+static inline void armv7_pmnc_enable_counter()
+{
+	u32 val;
+
+	val = CNTENS_C;
+	val &= CNTENS_MASK;
+	asm volatile("mcr p15, 0, %0, c9, c12, 1" : : "r" (val));
+}
+
+static inline void armv7_start_pmnc(void)
+{
+	armv7_pmnc_write(armv7_pmnc_read() | PMNC_E);
+}
+
+static inline void armv7_stop_pmnc(void)
+{
+	armv7_pmnc_write(armv7_pmnc_read() & ~PMNC_E);
+}
+
+static inline u32 armv7_counter_read(void)
+{
+	u32 val;
+
+	asm volatile("mrc p15, 0, %0, c9, c13, 0" : "=r" (val));
+	return val;
+}
+
+static inline u32 armv7_pmnc_getreset_flags(void)
+{
+	u32 val;
+
+	/* Read */
+	asm volatile("mrc p15, 0, %0, c9, c12, 3" : "=r" (val));
+
+	/* Write to clear flags */
+	val &= FLAG_MASK;
+	asm volatile("mcr p15, 0, %0, c9, c12, 3" : : "r" (val));
+
+	return val;
+}
+
+int do_calibrate_delay(cmd_tbl_t * cmdtp, int flag, int argc, char *argv[])
+{
+	ulong oldtimer, timer;
+	unsigned int val, val_new;
+	unsigned int flags;
+
+	loops_per_sec = 0;
+	printf("Calibrating delay loop.. ");
+
+	armv7_pmnc_write(PMNC_P | PMNC_C);
+	armv7_pmnc_disable_counter();
+	armv7_pmnc_reset_counter();
+	armv7_pmnc_enable_counter();
+	val = armv7_counter_read();
+	armv7_start_pmnc();
+
+	oldtimer = READ_TIMER;
+	oldtimer = READ_TIMER;
+	while (1) {
+		timer = READ_TIMER;
+		timer = READ_TIMER;
+		timer = timer - oldtimer;
+		if (timer >= CONFIG_SYS_HZ)
+			break;
+	}
+
+	armv7_stop_pmnc();
+	val_new = armv7_counter_read();
+	flags = armv7_pmnc_getreset_flags();
+	if(flags & FLAG_C)
+		printf("counter overflow\n");
+	loops_per_sec = val_new - val;
+
+	printf("ok - %lu.%02lu BogoMips\n",
+			loops_per_sec/1000000,
+			(loops_per_sec/10000) % 100);
+
+	return 0;
+}
+#else
 static inline void __delay(unsigned long loops)
 {
 	__asm__ __volatile__ ("1:\n" "subs %0, %1, #1\n"
@@ -594,12 +725,15 @@ int do_calibrate_delay(cmd_tbl_t * cmdtp, int flag, int argc, char *argv[])
 	printf("failed\n");
 	return -1;
 }
+#endif
+
 
 U_BOOT_CMD(
 		mips,	6,	1,	do_calibrate_delay,
 		"mips	- calculating BogoMips\n",
 		" - calculating BogoMips\n"
 	  );
+
 #if 0
 int do_read_timer(cmd_tbl_t * cmdtp, int flag, int argc, char *argv[])
 {
-- 
1.6.0.4

