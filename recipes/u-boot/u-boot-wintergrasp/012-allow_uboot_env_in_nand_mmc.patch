diff -Nur u-boot-2009.08.lastpatch/board/freescale/wintergrasp/wintergrasp.c u-boot-2009.08/board/freescale/wintergrasp/wintergrasp.c
--- u-boot-2009.08.lastpatch/board/freescale/wintergrasp/wintergrasp.c	2011-07-15 14:53:06.307785396 +0800
+++ u-boot-2009.08/board/freescale/wintergrasp/wintergrasp.c	2011-07-21 16:24:48.010839543 +0800
@@ -309,7 +309,7 @@
   int m = REG_RD_ADDR(GLOBAL_BOOT_MODE_ADDR);
 
 #ifdef CONFIG_UPDATER
-  if (*((int *) UPDATER_GLOB_ADDR) == UPDATER_MAGIC)
+  if (UPDATER_MAGIC_SIGN(*((int *) UPDATER_GLOB_ADDR)) == UPDATER_MAGIC)
     bootmode = BOOTMODE_UPDATER;
   else
 #endif
@@ -339,17 +339,54 @@
   return bootmode == BOOTMODE_NAND;
 }
 
+int is_bootmode_updater_env_nowhere()
+{
+
+#ifdef CONFIG_UPDATER
+  if (bootmode == BOOTMODE_UPDATER)
+    return UPDATER_MAGIC_ENV(*((int *) UPDATER_GLOB_ADDR)) == UPDATER_MAGIC_ENV_NOWHERE;
+#endif
+
+  return 0;
+}
+
+int is_bootmode_updater_env_nand()
+{
+
+#ifdef CONFIG_UPDATER
+  if (bootmode == BOOTMODE_UPDATER)
+    return UPDATER_MAGIC_ENV(*((int *) UPDATER_GLOB_ADDR)) == UPDATER_MAGIC_ENV_NAND;
+#endif
+
+  return 0;
+}
+
+int is_bootmode_updater_env_mmc()
+{
+
+#ifdef CONFIG_UPDATER
+  if (bootmode == BOOTMODE_UPDATER)
+    return UPDATER_MAGIC_ENV(*((int *) UPDATER_GLOB_ADDR)) == UPDATER_MAGIC_ENV_MMC;
+#endif
+
+  return 0;
+}
+
 void set_bootmode_env()
 {
+
+#ifdef CONFIG_UPDATER
   if (is_bootmode_updater())
   {
     char *updater_run_script = (char *) (UPDATER_GLOB_ADDR + sizeof(int));
 
     setenv("bootmode", "updater");
-
-#ifdef CONFIG_UPDATER
+    setenv(
+      "updater_env",
+      is_bootmode_updater_env_nowhere() ? "nowhere" :
+      is_bootmode_updater_env_nand() ? "nand" :
+      is_bootmode_updater_env_mmc() ? "mmc" : "unknown");
     setenv("updater_run_script", updater_run_script);
-#endif
 
     if (*updater_run_script)
     {
@@ -364,6 +401,7 @@
 
     }
   } else
+#endif
 
   if (is_bootmode_mmc())
     setenv("bootmode", "mmc");
diff -Nur u-boot-2009.08.lastpatch/common/env_mmc.c u-boot-2009.08/common/env_mmc.c
--- u-boot-2009.08.lastpatch/common/env_mmc.c	2011-07-15 14:53:06.171119420 +0800
+++ u-boot-2009.08/common/env_mmc.c	2011-07-21 15:01:21.992540845 +0800
@@ -33,9 +33,13 @@
 /* references to names in env_common.c */
 extern uchar default_environment[];
 
+#if !defined(CONFIG_ENV_IS_IN_NAND_MMC)
 char *env_name_spec = "MMC";
+#endif
 
-#ifdef ENV_IS_EMBEDDED
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC)
+extern env_t *env_ptr;
+#elif defined(ENV_IS_EMBEDDED)
 extern uchar environment[];
 env_t *env_ptr = (env_t *)(&environment[0]);
 #else /* ! ENV_IS_EMBEDDED */
@@ -51,12 +55,28 @@
 
 DECLARE_GLOBAL_DATA_PTR;
 
-uchar env_get_char_spec(int index)
+uchar
+
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC)
+env_get_char_spec_mmc
+#else
+env_get_char_spec
+#endif
+
+(int index)
 {
 	return *((uchar *)(gd->env_addr + index));
 }
 
-int env_init(void)
+int
+
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC)
+env_init_mmc
+#else
+env_init
+#endif
+
+(void)
 {
 	/* use default */
 	gd->env_addr = (ulong)&default_environment[0];
@@ -102,7 +122,15 @@
 	return (n == blk_cnt) ? 0 : -1;
 }
 
-int saveenv(void)
+int
+
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC)
+saveenv_mmc
+#else
+saveenv
+#endif
+
+(void)
 {
 	struct mmc *mmc = find_mmc_device(mmc_env_devno);
 
@@ -110,7 +138,15 @@
 		return 1;
 
 	printf("Writing to MMC(%d)... ", mmc_env_devno);
-	if (write_env(mmc, CONFIG_ENV_SIZE, CONFIG_ENV_OFFSET, env_ptr)) {
+	if (write_env(mmc, CONFIG_ENV_SIZE,
+   
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC) 
+    CONFIG_ENV_OFFSET_MMC
+#else
+    CONFIG_ENV_OFFSET
+#endif
+    
+    , env_ptr)) {
 		puts("failed\n");
 		return 1;
 	}
@@ -134,7 +170,15 @@
 	return (n == blk_cnt) ? 0 : -1;
 }
 
-void env_relocate_spec(void)
+void
+
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC)
+env_relocate_spec_mmc
+#else
+env_relocate_spec
+#endif
+
+(void)
 {
 #if !defined(ENV_IS_EMBEDDED)
 	struct mmc *mmc = find_mmc_device(mmc_env_devno);
@@ -142,7 +186,15 @@
 	if (init_mmc_for_env(mmc))
 		return use_default();
 
-	if (read_env(mmc, CONFIG_ENV_SIZE, CONFIG_ENV_OFFSET, env_ptr))
+	if (read_env(mmc, CONFIG_ENV_SIZE,
+
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC) 
+    CONFIG_ENV_OFFSET_MMC
+#else
+    CONFIG_ENV_OFFSET
+#endif
+
+    , env_ptr))
 		return use_default();
 
 	if (crc32(0, env_ptr->data, ENV_SIZE) != env_ptr->crc)
diff -Nur u-boot-2009.08.lastpatch/common/env_nand.c u-boot-2009.08/common/env_nand.c
--- u-boot-2009.08.lastpatch/common/env_nand.c	2011-07-15 14:53:06.171119420 +0800
+++ u-boot-2009.08/common/env_nand.c	2011-07-21 15:01:29.352885658 +0800
@@ -60,10 +60,13 @@
 /* references to names in env_common.c */
 extern uchar default_environment[];
 
-char * env_name_spec = "NAND";
-
+#if !defined(CONFIG_ENV_IS_IN_NAND_MMC)
+char *env_name_spec = "NAND";
+#endif
 
-#if defined(ENV_IS_EMBEDDED)
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC)
+extern env_t *env_ptr;
+#elif defined(ENV_IS_EMBEDDED)
 extern uchar environment[];
 env_t *env_ptr = (env_t *)(&environment[0]);
 #elif defined(CONFIG_NAND_ENV_DST)
@@ -80,7 +83,15 @@
 
 DECLARE_GLOBAL_DATA_PTR;
 
-uchar env_get_char_spec (int index)
+uchar
+
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC)
+env_get_char_spec_nand
+#else
+env_get_char_spec
+#endif
+
+(int index)
 {
 	return ( *((uchar *)(gd->env_addr + index)) );
 }
@@ -97,7 +108,15 @@
  * the SPL loads not only the U-Boot image from NAND but also the
  * environment.
  */
-int env_init(void)
+int
+
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC)
+env_init_nand
+#else
+env_init
+#endif
+
+(void)
 {
 #if defined(ENV_IS_EMBEDDED) || defined(CONFIG_NAND_ENV_DST)
 	int crc1_ok = 0, crc2_ok = 0;
@@ -190,7 +209,15 @@
 	return 0;
 }
 #ifdef CONFIG_ENV_OFFSET_REDUND
-int saveenv(void)
+int
+
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC)
+saveenv_nand
+#else
+saveenv
+#endif
+
+(void)
 {
 	int ret = 0;
 	nand_erase_options_t nand_erase_options;
@@ -231,7 +258,15 @@
 	return ret;
 }
 #else /* ! CONFIG_ENV_OFFSET_REDUND */
-int saveenv(void)
+int
+
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC)
+saveenv_nand
+#else
+saveenv
+#endif
+
+(void)
 {
 	int ret = 0;
 	nand_erase_options_t nand_erase_options;
@@ -240,7 +275,15 @@
 	nand_erase_options.quiet = 0;
 	nand_erase_options.jffs2 = 0;
 	nand_erase_options.scrub = 0;
-	nand_erase_options.offset = CONFIG_ENV_OFFSET;
+	nand_erase_options.offset =
+  
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC) 
+  CONFIG_ENV_OFFSET_NAND
+#else
+  CONFIG_ENV_OFFSET
+#endif
+
+  ;
 
 	if (CONFIG_ENV_RANGE < CONFIG_ENV_SIZE)
 		return 1;
@@ -249,7 +292,15 @@
 		return 1;
 
 	puts ("Writing to Nand... ");
-	if (writeenv(CONFIG_ENV_OFFSET, (u_char *) env_ptr)) {
+	if (writeenv(
+    
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC) 
+    CONFIG_ENV_OFFSET_NAND
+#else
+    CONFIG_ENV_OFFSET
+#endif
+
+    , (u_char *) env_ptr)) {
 		puts("FAILED!\n");
 		return 1;
 	}
@@ -289,7 +340,15 @@
 }
 
 #ifdef CONFIG_ENV_OFFSET_REDUND
-void env_relocate_spec (void)
+void
+
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC)
+env_relocate_spec_nand
+#else
+env_relocate_spec
+#endif
+
+(void)
 {
 #if !defined(ENV_IS_EMBEDDED)
 	int crc1_ok = 0, crc2_ok = 0;
@@ -345,12 +404,28 @@
  * The legacy NAND code saved the environment in the first NAND device i.e.,
  * nand_dev_desc + 0. This is also the behaviour using the new NAND code.
  */
-void env_relocate_spec (void)
+void
+
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC)
+env_relocate_spec_nand
+#else
+env_relocate_spec
+#endif
+
+(void)
 {
 #if !defined(ENV_IS_EMBEDDED)
 	int ret;
 
-	ret = readenv(CONFIG_ENV_OFFSET, (u_char *) env_ptr);
+	ret = readenv(
+  
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC) 
+  CONFIG_ENV_OFFSET_NAND
+#else
+  CONFIG_ENV_OFFSET
+#endif
+  
+  , (u_char *) env_ptr);
 	if (ret)
 		return use_default();
 
diff -Nur u-boot-2009.08.lastpatch/common/env_nand_mmc.c u-boot-2009.08/common/env_nand_mmc.c
--- u-boot-2009.08.lastpatch/common/env_nand_mmc.c	1970-01-01 07:30:00.000000000 +0730
+++ u-boot-2009.08/common/env_nand_mmc.c	2011-07-21 16:29:16.391622455 +0800
@@ -0,0 +1,109 @@
+/*
+ * (C) Copyright 2000-2002
+ * Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+ *
+ * (C) Copyright 2001 Sysgo Real-Time Solutions, GmbH <www.elinos.com>
+ * Andreas Heppel <aheppel@sysgo.de>
+
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <common.h>
+#include <command.h>
+#include <environment.h>
+#include <linux/stddef.h>
+
+int is_bootmode_updater();
+int is_bootmode_mmc();
+int is_bootmode_nand();
+
+int is_bootmode_updater_env_nowhere();
+int is_bootmode_updater_env_nand();
+int is_bootmode_updater_env_mmc();
+
+void env_relocate_spec_nand(void);
+void env_relocate_spec_mmc(void);
+void env_relocate_spec_nowhere(void);
+
+uchar env_get_char_spec_nand(int);
+uchar env_get_char_spec_mmc(int);
+uchar env_get_char_spec_nowhere(int);
+
+int saveenv_nand(void);
+int saveenv_mmc(void);
+
+int  env_init_nand(void);
+int  env_init_mmc(void);
+int  env_init_nowhere(void);
+
+char *env_name_spec = "NAND_MMC";
+
+env_t *env_ptr = 0;
+
+void env_relocate_spec (void)
+{
+  if (is_bootmode_nand() || is_bootmode_updater_env_nand())
+  {
+    env_relocate_spec_nand();
+
+    return;
+  }
+
+  if (is_bootmode_mmc() || is_bootmode_updater_env_mmc())
+  {
+    env_relocate_spec_mmc();
+
+    return;
+  }
+
+  env_relocate_spec_nowhere();
+}
+
+uchar env_get_char_spec (int index)
+{
+  if (is_bootmode_nand() || is_bootmode_updater_env_nand())
+    return env_get_char_spec_nand(index);
+
+  if (is_bootmode_mmc() || is_bootmode_updater_env_mmc())
+    return env_get_char_spec_mmc(index);
+
+  return env_get_char_spec_nowhere(index);
+}
+
+int saveenv(void)
+{
+  if (is_bootmode_nand() || is_bootmode_updater_env_nand())
+    return saveenv_nand();
+
+  if (is_bootmode_mmc() || is_bootmode_updater_env_mmc())
+    return saveenv_mmc();
+
+	return -1;
+}
+
+int  env_init(void)
+{
+  if (is_bootmode_nand() || is_bootmode_updater_env_nand())
+    return env_init_nand();
+
+  if (is_bootmode_mmc() || is_bootmode_updater_env_mmc())
+    return env_init_mmc();
+
+  return env_init_nowhere();
+}
diff -Nur u-boot-2009.08.lastpatch/common/env_nowhere.c u-boot-2009.08/common/env_nowhere.c
--- u-boot-2009.08.lastpatch/common/env_nowhere.c	2011-07-15 14:53:06.167786104 +0800
+++ u-boot-2009.08/common/env_nowhere.c	2011-07-21 15:01:54.028550037 +0800
@@ -31,16 +31,36 @@
 
 DECLARE_GLOBAL_DATA_PTR;
 
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC)
+extern env_t *env_ptr;
+#else
 env_t *env_ptr = NULL;
+#endif
 
 extern uchar default_environment[];
 
 
-void env_relocate_spec (void)
+void
+
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC)
+env_relocate_spec_nowhere
+#else
+env_relocate_spec
+#endif
+
+(void)
 {
 }
 
-uchar env_get_char_spec (int index)
+uchar
+
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC)
+env_get_char_spec_nowhere
+#else
+env_get_char_spec
+#endif
+
+(int index)
 {
 	return ( *((uchar *)(gd->env_addr + index)) );
 }
@@ -50,7 +70,15 @@
  *
  * We are still running from ROM, so data use is limited
  */
-int  env_init(void)
+int
+
+#if defined(CONFIG_ENV_IS_IN_NAND_MMC)
+env_init_nowhere
+#else
+env_init
+#endif
+
+(void)
 {
 	gd->env_addr  = (ulong)&default_environment[0];
 	gd->env_valid = 0;
diff -Nur u-boot-2009.08.lastpatch/common/Makefile u-boot-2009.08/common/Makefile
--- u-boot-2009.08.lastpatch/common/Makefile	2011-07-15 14:53:06.171119420 +0800
+++ u-boot-2009.08/common/Makefile	2011-07-21 11:36:52.568961269 +0800
@@ -66,6 +66,7 @@
 COBJS-$(CONFIG_ENV_IS_IN_SPI_FLASH) += env_sf.o
 COBJS-$(CONFIG_ENV_IS_IN_MMC) += env_mmc.o
 COBJS-$(CONFIG_ENV_IS_NOWHERE) += env_nowhere.o
+COBJS-$(CONFIG_ENV_IS_IN_NAND_MMC) += env_nand_mmc.o env_nowhere.o
 
 # command
 COBJS-$(CONFIG_CMD_AMBAPP) += cmd_ambapp.o
diff -Nur u-boot-2009.08.lastpatch/include/configs/wintergrasp.h u-boot-2009.08/include/configs/wintergrasp.h
--- u-boot-2009.08.lastpatch/include/configs/wintergrasp.h	2011-07-15 14:53:06.477784542 +0800
+++ u-boot-2009.08/include/configs/wintergrasp.h	2011-07-21 16:13:36.465251490 +0800
@@ -203,22 +203,50 @@
 /*
  * Environments
  */
-#define CONFIG_FSL_ENV_IN_MMC
+#define CONFIG_FSL_ENV_IN_NAND_MMC
 
 #define CONFIG_CMD_ENV
 #define CONFIG_ENV_OVERWRITE
 
-#if defined(CONFIG_FSL_ENV_IN_NAND)
+#if defined(CONFIG_FSL_ENV_IN_NAND_MMC) || defined(CONFIG_FSL_ENV_IN_NAND)
 	#define CONFIG_ENV_IS_IN_NAND 1
-	#define CONFIG_ENV_OFFSET	0x1400000 /* Nand env, offset: 20M */
-	#define CONFIG_ENV_SECT_SIZE    (128 * 1024)
-	#define CONFIG_ENV_SIZE         CONFIG_ENV_SECT_SIZE
-#elif defined(CONFIG_FSL_ENV_IN_MMC)
+	#define CONFIG_ENV_OFFSET_NAND	0x1400000 /* Nand env, offset: 20M */
+	#define CONFIG_ENV_SECT_SIZE_NAND    (128 * 1024)
+	#define CONFIG_ENV_SIZE_NAND         CONFIG_ENV_SECT_SIZE_NAND
+
+#if defined(CONFIG_FSL_ENV_IN_NAND)
+  #define CONFIG_ENV_OFFSET CONFIG_ENV_OFFSET_NAND
+  #define CONFIG_ENV_SECT_SIZE CONFIG_ENV_SECT_SIZE_NAND
+  #define CONFIG_ENV_SIZE CONFIG_ENV_SIZE_NAND
+#endif
+
+#endif
+
+#if defined(CONFIG_FSL_ENV_IN_NAND_MMC) || defined(CONFIG_FSL_ENV_IN_MMC)
 	#define CONFIG_ENV_IS_IN_MMC	1
 	/* Assoiated with the MMC layout defined in mmcops.c */
-	#define CONFIG_ENV_OFFSET               (0x800 + IMAGE_FATFS_SIZE + IMAGE_CONFIG_BLOCK_SIZE + 512) /* 2 KB (MBR) + FATFS_SIZE + CONFIG_BLOCK_SIZE + 512 (SBMAGIC) */
-	#define CONFIG_ENV_SIZE                 (0x20000 - 0x400) /* 127 KB */
+	#define CONFIG_ENV_OFFSET_MMC               (0x800 + IMAGE_FATFS_SIZE + IMAGE_CONFIG_BLOCK_SIZE + 512) /* 2 KB (MBR) + FATFS_SIZE + CONFIG_BLOCK_SIZE + 512 (SBMAGIC) */
+	#define CONFIG_ENV_SIZE_MMC                 (0x20000 - 0x400) /* 127 KB */
+
+#if defined(CONFIG_FSL_ENV_IN_MMC)
+  #define CONFIG_ENV_OFFSET CONFIG_ENV_OFFSET_MMC
+  #define CONFIG_ENV_SIZE CONFIG_ENV_SIZE_MMC
+#endif
+
+#endif
+
+#if defined(CONFIG_FSL_ENV_IN_NAND_MMC)
+  #define CONFIG_ENV_IS_IN_NAND_MMC
+
+#if CONFIG_ENV_SIZE_NAND > CONFIG_ENV_SIZE_MMC
+  #define CONFIG_ENV_SIZE CONFIG_ENV_SIZE_NAND
 #else
+  #define CONFIG_ENV_SIZE CONFIG_ENV_SIZE_MMC
+#endif
+
+#endif
+
+#if defined(CONFIG_FSL_ENV_IN_NOWHERE)
 	#define CONFIG_ENV_IS_NOWHERE	1
 #endif
 
@@ -247,7 +275,15 @@
 #define CONFIG_UPDATER
 
 #define UPDATER_GLOB_ADDR 0x42800000
-#define UPDATER_MAGIC TWIST(0x03451c00)
+
+#define UPDATER_MAGIC_SIGN(MAGIC) (TWIST(MAGIC) & 0xffffff00)
+#define UPDATER_MAGIC_ENV(MAGIC) (TWIST(MAGIC) & 0xff)
+
+#define UPDATER_MAGIC 0x03451c00
+
+#define UPDATER_MAGIC_ENV_NOWHERE 0
+#define UPDATER_MAGIC_ENV_NAND 0x01
+#define UPDATER_MAGIC_ENV_MMC 0x02
 
 #define CONFIG_LOADIMG
 
diff -Nur u-boot-2009.08.lastpatch/include/environment.h u-boot-2009.08/include/environment.h
--- u-boot-2009.08.lastpatch/include/environment.h	2011-07-15 14:53:06.514451024 +0800
+++ u-boot-2009.08/include/environment.h	2011-07-18 15:48:49.085938543 +0800
@@ -70,7 +70,8 @@
 #endif	/* CONFIG_ENV_IS_IN_FLASH */
 
 #if defined(CONFIG_ENV_IS_IN_NAND)
-# ifndef CONFIG_ENV_OFFSET
+# if (!defined(CONFIG_ENV_IS_IN_NAND_MMC) && !defined(CONFIG_ENV_OFFSET)) || \
+     (defined(CONFIG_ENV_IS_IN_NAND_MMC) && !defined(CONFIG_ENV_OFFSET_NAND))
 #  error "Need to define CONFIG_ENV_OFFSET when using CONFIG_ENV_IS_IN_NAND"
 # endif
 # ifndef CONFIG_ENV_SIZE
@@ -97,7 +98,8 @@
 #endif /* CONFIG_ENV_IS_IN_MG_DISK */
 
 #if defined(CONFIG_ENV_IS_IN_MMC)
-# ifndef CONFIG_ENV_OFFSET
+# if (!defined(CONFIG_ENV_IS_IN_NAND_MMC) && !defined(CONFIG_ENV_OFFSET)) || \
+     (defined(CONFIG_ENV_IS_IN_NAND_MMC) && !defined(CONFIG_ENV_OFFSET_MMC))
 #  error "Need to define CONFIG_ENV_OFFSET when using CONFIG_ENV_IS_IN_MMC"
 # endif
 # ifndef CONFIG_ENV_ADDR
diff -Nur u-boot-2009.08.lastpatch/lib_arm/board.c u-boot-2009.08/lib_arm/board.c
--- u-boot-2009.08.lastpatch/lib_arm/board.c	2011-07-15 14:53:06.431118110 +0800
+++ u-boot-2009.08/lib_arm/board.c	2011-07-18 16:45:07.082075757 +0800
@@ -282,6 +282,11 @@
 	interrupt_init,		/* set up exceptions */
 #endif
 	timer_init,		/* initialize timer */
+
+#ifdef CONFIG_BOOTMODE
+  setup_bootmode_access, //Move up to allow early detection of bootmode in env_init
+#endif
+
 	env_init,		/* initialize environment */
 	init_baudrate,		/* initialze baudrate settings */
 	serial_init,		/* serial communications setup */
@@ -300,9 +305,6 @@
 #if defined(CONFIG_CMD_PCI) || defined (CONFIG_PCI)
 	arm_pci_init,
 #endif
-#ifdef CONFIG_BOOTMODE
-  setup_bootmode_access,
-#endif
 #ifdef CONFIG_LOADIMG
   setup_loadimg,
 #endif
